#Область ПрограммныйИнтерфейс

Функция ПолучитьПоследнююВерсию() Экспорт

	ПоследнийРелиз = МИтКоннекторHTTP.GetJson(
		"https://api.github.com/repos/korotovskih/m10n_reprieve/releases/latest");
	
	ОписаниеРелиза = Новый Структура;	
    ОписаниеРелиза.Вставить("Версия", ПоследнийРелиз.Получить("tag_name"));
	
	Возврат ОписаниеРелиза;
	
КонецФункции

Функция ПолучитьДанные(Версия) Экспорт
	
	Uri = СтрШаблон("https://github.com/korotovskih/m10n_reprieve/releases/download/%1/m10n_reprieve.cfe", Версия); 	
	Ответ = МИтКоннекторHTTP.Get(Uri);	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение МИтКоннекторHTTP.КакИсключение(Ответ);	
	КонецЕсли;
	
	Данные = МИтКоннекторHTTP.КакДвоичныеДанные(Ответ); 

	_ПроверитьДанныеРасширенияКонфигурации(Новый Структура("Имя, Версия", "m10n_reprieve", Версия), Данные);	
	
	Возврат Данные; 
	
КонецФункции

Функция ПолучитьУстановленнуюВерсию() Экспорт
	
	Если ПравоДоступа("Administration", Метаданные) = Ложь
		И БезопасныйРежим() = Ложь
		И ПривилегированныйРежим() = Ложь Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Массив = РасширенияКонфигурации.Получить(Новый Структура("Имя", "m10n_reprieve"));
	
	Результат = Новый Структура;	
    Результат.Вставить("Версия", Массив[0].Версия);
			
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьАктивнуюВерсию() Экспорт
	
	Расширение = Метаданные.Обработки.МИтПодготовкаПодтверждения.РасширениеКонфигурации();
	
	Результат = Новый Структура;	
    Результат.Вставить("Версия", Расширение.Версия);
			
	Возврат Результат;		
	
КонецФункции

Функция УстановитьВерсию(Версия) Экспорт

	Данные = ПолучитьДанные(Версия); 
	Возврат _УстановитьРасширение("m10n_reprieve", Данные);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура _ПроверитьДанныеРасширенияКонфигурации(Расширение, Данные)
	
	ПараметрыКонструктора = Новый Массив;
	ПараметрыКонструктора.Добавить(Данные);
	
	ОписаниеКонфигурации = Новый(Тип("ОписаниеКонфигурации"), ПараметрыКонструктора);
	Если ОписаниеКонфигурации.Версия <> Расширение.Версия
		ИЛИ ОписаниеКонфигурации.Имя <> Расширение.Имя Тогда
		ВызватьИсключение "Данные расширения конфигурации не совпадают с манифестом";
	КонецЕсли;
	
КонецПроцедуры

Функция _УстановитьРасширение(Имя, ДанныеРасширения)
	
	Если ПравоДоступа("Administration", Метаданные) = Ложь 
		И БезопасныйРежим() = Ложь
		И ПривилегированныйРежим() = Ложь Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Расширение = _НайтиРасширениеПоИмени(Имя);
	Если Расширение = Неопределено Тогда
		Расширение = Вычислить("РасширенияКонфигурации").Создать();
	КонецЕсли;

	ЗащитаОтОпасныхДействий = Вычислить("Новый ОписаниеЗащитыОтОпасныхДействий");
	ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;	
	
	Расширение.Активно = Истина;
	Расширение.БезопасныйРежим = Ложь;
	Расширение.ЗащитаОтОпасныхДействий = ЗащитаОтОпасныхДействий;
	
	Структура = Новый Структура("ИспользоватьОсновныеРолиДляВсехПользователей");
	ЗаполнитьЗначенияСвойств(Структура, Расширение);
	Если Структура.ИспользоватьОсновныеРолиДляВсехПользователей <> Неопределено Тогда
		Расширение.ИспользоватьОсновныеРолиДляВсехПользователей = Истина;	
	КонецЕсли;
	
	Проблемы = Расширение.ПроверитьВозможностьПрименения(ДанныеРасширения);
	Отказ = Ложь;
	
	Для Каждого Элемент Из Проблемы Цикл
		
		Ошибка = "(" + Элемент.Важность + ") " + 
			Элемент.Расширение.Синоним + ": " + 
			Элемент.Описание;
				
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Ошибка;
		Сообщение.Сообщить();
		
		НизкаяВажность = ПредопределенноеЗначение("ВажностьПроблемыПримененияРасширенияКонфигурации.Низкая");	
		Если Элемент.Важность <> НизкаяВажность Тогда
			Отказ = Истина;	
		КонецЕсли;
		
	КонецЦикла;
		
	Если НЕ Отказ Тогда
		Расширение.Записать(ДанныеРасширения);		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции // УстановитьРасширениеПоИмени

Функция _НайтиРасширениеПоИмени(Имя)
	
	Если ПравоДоступа("Administration", Метаданные) = Ложь 
		И БезопасныйРежим() = Ложь
		И ПривилегированныйРежим() = Ложь Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", СокрЛП(Имя));

	Расширение = Неопределено;
	Расширения = Вычислить("РасширенияКонфигурации").Получить(Отбор);
 	Если Расширения.Количество() Тогда
		Расширение = Расширения[0];	
	КонецЕсли;
		
	Возврат Расширение;
	
КонецФункции // НайтиРасширениеПоИмени

#КонецОбласти



